#!/bin/bash

# Copyright (c) 2016, Intel Corporation.
# Author: Geoff Gustafson <geoff@linux.intel.com>

# trlite - a local version of the tests we run in Travis
#   trlite [-v] [vmname] [testnum]
#
#   -v turns on verbose output
#   by default, runs all tests
#   trlite 1 or trlite zephyr runs just VM #1 "zephyr" tests
#   trlite 2 or trlite linux  runs just VM #2 "linux"  tests
#   trlite 3 or trlite ashell runs just VM #3 "ashell" tests
#   optional testnum is the first subtest to start with (default 1)

if [ ! -d "$ZJS_BASE" ]; then
   >&2 echo "ZJS_BASE not defined. You need to source zjs-env.sh."
   exit 1
fi

TRLDIR=$ZJS_BASE/.trlite

if [ "$1" == "-h" -o "$1" == "-?" ]; then
    echo usage: trlite [-h] [-v] [vmname] [testnum]
    echo
    echo positional arguments:
    echo "  vmname   vm number 1/2/3 or name zephyr/linux/ashell (default: all)"
    echo "  testnum  subtest to start with (default: 1)"
    echo
    echo optional arguments:
    echo "  -h, -?   show this help message and exit"
    echo "  -v       turn on verbose build output"
    exit 1
fi

VERBOSE=
if [ "$1" == "-v" ]; then
    VERBOSE=V=1
    shift
fi

# flags for running tests from the different VMs
VM1=y
VM2=y
VM3=y

if [ "$1" == "1" -o "$1" == "zephyr" ]; then VM2=n; VM3=n; fi
if [ "$1" == "2" -o "$1" == "linux" ]; then VM1=n; VM3=n; fi
if [ "$1" == "3" -o "$1" == "ashell" ]; then VM1=n; VM2=n; fi
shift

START=1
if [[ "$1" =~ ^[0-9]+$ ]]; then
    START=$1
    shift
fi

rm -rf $TRLDIR

echo Building ZJS tree: "$ZJS_BASE"
echo Cloning git tree...
git clone -l $ZJS_BASE $TRLDIR > /dev/null 2>&1

echo Cloning git submodules...
cd $TRLDIR/deps
for i in */; do
    git clone -l ../../deps/$i/.git $i > /dev/null 2>&1

    # clone submodules of submodules
    if [ -d $i/deps/ ]; then
        cd $i/deps
        for j in */; do
            git clone -l ../../../../deps/$i/deps/$j/.git $j > /dev/null 2>&1
        done
        cd ../..
    fi
done

echo Preserving uncommitted changes:
cd $ZJS_BASE
git diff HEAD --stat
git diff HEAD > $TRLDIR/uncommitted.patch
cd $TRLDIR
patch -p1 < uncommitted.patch > /dev/null

# pause to allow consideration of diffs being applied
sleep 3

echo Updating submodules...
make update

echo
echo Running tests...

source zjs-env.sh
source deps/zephyr/zephyr-env.sh

# requires: first arg is a <=10-char label, second arg is command
#  effects: runs banner with label, then runs the command; if it fails, prints
#             label before exiting
function try_command()
{
    TESTNUM=$((TESTNUM + 1))
    if [ "$TESTNUM" -lt "$START" ]; then
        echo "Skipping test #$TESTNUM"
        return
    fi

    LABEL=$1
    shift
    banner "$LABEL"
    if ! $*; then
        CODE=$?
        echo Error: Failed in $LABEL!
        exit $CODE
    fi
    echo Success: $LABEL
}

# requires: first arg is a <=10-char label, second arg is function to run
#  effects: runs banner with label, then runs the function; if it fails, prints
#             label before exiting
function try_func()
{
    TESTNUM=$((TESTNUM + 1))
    if [ "$TESTNUM" -lt "$START" ]; then
        echo "Skipping test #$TESTNUM"
        return
    fi

    banner $1
    if ! $2; then
        CODE=$?
        echo Error: Failed in $1!
        exit $CODE
    fi
    echo Success: $1
}

#
# Tests from VM #1
#

if [ "$VM1" == "y" ]; then
    TESTNUM=0

    # A101 build tests spanning all modules
    try_command "helloworld" make $VERBOSE
    try_command "traffic" make $VERBOSE JS=samples/TrafficLight.js
    try_command "pwm" make $VERBOSE JS=samples/PWM.js
    try_command "i2c" make $VERBOSE JS=samples/I2C.js
    try_command "uart" make $VERBOSE JS=samples/UART.js
    try_command "events" make $VERBOSE JS=samples/tests/Events.js
    try_command "perf" make $VERBOSE JS=tests/test-performance.js

    # k64f build tests
    git clean -dfx
    try_command "k64f hello" make $VERBOSE BOARD=frdm_k64f

    # arc build tests
    git clean -dfx
    try_command "arc" make $VERBOSE arc

    # 256KB partition build tests
    git clean -dfx
    source zjs-env.sh 256
    try_command "btgrove" make $VERBOSE JS=samples/WebBluetoothGroveLcdDemo.js
fi

#
# Tests from VM #2
#

function check_jstring_util() {
    CALLCOUNT=$(grep jerry_string_to_char_buffer src/zjs_util.c | wc -l)

    # make sure there are exactly two calls to the function
    if [ "$CALLCOUNT" != "2" ]; then
        echo "Error: Expected two calls to jerry_string_to_char_buffer in zjs_util.c!"
        echo "Use zjs_copy_jstring and zjs_alloc_from_jstring instead."
        return 1;
    fi
}

function check_jstring_others() {
    SRCFILES=$(find src -name "*.[ch]" | grep -v zjs_util.c)

    # make sure there are no other calls to the function
    if grep jerry_string_to_char_buffer $SRCFILES; then
        echo
        echo "Error: Found calls to jerry_string_to_char_buffer outside zjs_util.c!"
        echo "Use zjs_copy_jstring and zjs_alloc_from_jstring instead."
        return 1;
    fi
}

if [ "$VM2" == "y" ]; then
    TESTNUM=0

    # git check
    try_command "git check" git diff --check $(git rev-list HEAD | tail -1)

    # ensure only two uses of jerry_string_to_char_buffer in zjs_util.c
    try_func "jstring1" check_jstring_util

    # ensure no other source file uses jerry-string_to_char_buffer
    try_func "jstring2" check_jstring_others

    # linux build tests
    try_command "linux" make $VERBOSE linux

    # linux unit tests
    try_command "unit tests" ./outdir/linux/release/jslinux --unittest
fi

#
# Tests from VM #3
#

if [ "$VM3" == "y" ]; then
    TESTNUM=0

    # ashell tests
    git clean -dfx
    try_command "ashell" make $VERBOSE DEV=ashell
fi

# clean up on success
cd $ZJS_BASE
rm -rf $TRLDIR
